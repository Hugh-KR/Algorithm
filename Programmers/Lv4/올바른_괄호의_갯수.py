"""
괄호 쌍의 갯수에 따른 경우의 수
1 - () 1
2 - (()), ()() 2
3 - ((())), (())(), ()(()), (()()), ()()() 5
4 - (((()))), ((())) (), () ((())), ((()) ()), (()) (()),
    (()) () (), () (()) (), () () (()), (() (())), ((() ())), 
    (() () ()),(() ()) (), () (() ()), () () () () 14

* 가장 처음 열린 괄호의 내부에 몇쌍의 괄호가 포함되는가.

dp[3] = 3쌍의 괄호의 경우는 5가지
- 안에 2개, 밖에 0개의 괄호 -> ((())), (()()) = dp[2] * dp[0]
- 안에 1개, 밖에 1개의 괄호 -> (())() = dp[1] * dp[1]
- 안에 0개, 밖에 2개의 괄호 -> ()(()), ()()() = dp[0] * dp[2]

dp[0] = 1쌍으로 처리

점화식 -> dp[n] = (dp[n-1] * dp[0]) + (dp[n-2] * dp[1]) + (dp[0] * dp[n-1])

ex) dp[3] = (dp[2] * dp[0]) + (dp[1] * dp[1]) + (dp[0] * dp[2])
"""
def solution(n):
    dp = [0] * 15
    dp[0] = 1
    dp[1] = 1
    dp[2] = 2
    
    for i in range(3, len(dp)):
        for j in range(0, i):
            dp[i] += (dp[j]*dp[i-(j+1)])
        
    return dp[n]